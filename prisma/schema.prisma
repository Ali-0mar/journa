generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String         @id @default(uuid())
  email     String         @unique
  clerkId   String         @unique
  name      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  account   Account?
  entries   JournalEntry[]
  analysis  EntryAnalysis[]
}

model Account {
  id               String @id @default(uuid())
  userId           String
  user             User   @relation(fields: [userId], references: [id])
  // stripeCustomerId String @unique

  @@unique([userId])
}

enum JOURNAL_ENTRY_STATUS {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model JournalEntry {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String               @db.Text
  status  JOURNAL_ENTRY_STATUS @default(DRAFT)
  analysis EntryAnalysis?
  
  @@unique([userId, id])
}
model EntryAnalysis {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  entryId      String
  entry        JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  mood         String   @db.Text
  subject      String   @db.Text
  negative     Boolean
  summary      String   @db.Text
  color        String   @db.Text
  sentimentScore Float

  // Updated fields for academic analysis as single strings with comma-separated values
  keywords     String   @db.Text  // Comma-separated list of relevant keywords extracted from the entry
  concepts     String   @db.Text  // Comma-separated list of core concepts related to the entry
  resources    String @db.Text  // List of resources or references related to the subject of the entry
  incorrect_information    String @db.Text  // List of incorrect academic information extracted from the journal entry

  @@unique([entryId])
  @@index([userId])
}
